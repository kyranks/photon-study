{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "fe22f03b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import uproot\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import boost_histogram as bh\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "88a5caf7",
   "metadata": {},
   "outputs": [],
   "source": [
    "folder = '/eos/atlas/atlascerngroupdisk/perf-egamma/InclusivePhotons'\n",
    "branches = ['evtWeight', 'y_passOQ', 'y_pt', 'y_eta', 'y_isTruthMatchedPhoton', 'y_Rhad']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "ff98a0b6",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_photon = uproot.open(folder+'/mc21_gammajet_v02/PyPt17_mc21_800664.root', entrystop=1000)['SinglePhoton'].arrays(branches,library=\"pd\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "67d5442b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>evtWeight</th>\n",
       "      <th>y_passOQ</th>\n",
       "      <th>y_pt</th>\n",
       "      <th>y_eta</th>\n",
       "      <th>y_isTruthMatchedPhoton</th>\n",
       "      <th>y_Rhad</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>True</td>\n",
       "      <td>409.209595</td>\n",
       "      <td>1.753538</td>\n",
       "      <td>True</td>\n",
       "      <td>0.004472</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "      <td>True</td>\n",
       "      <td>315.108459</td>\n",
       "      <td>0.265245</td>\n",
       "      <td>True</td>\n",
       "      <td>0.008007</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.0</td>\n",
       "      <td>True</td>\n",
       "      <td>470.509003</td>\n",
       "      <td>1.089436</td>\n",
       "      <td>True</td>\n",
       "      <td>-0.003068</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.0</td>\n",
       "      <td>True</td>\n",
       "      <td>317.702118</td>\n",
       "      <td>-0.267235</td>\n",
       "      <td>True</td>\n",
       "      <td>0.009505</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.0</td>\n",
       "      <td>True</td>\n",
       "      <td>292.126465</td>\n",
       "      <td>0.317192</td>\n",
       "      <td>True</td>\n",
       "      <td>0.001446</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2373008</th>\n",
       "      <td>1.0</td>\n",
       "      <td>True</td>\n",
       "      <td>323.109375</td>\n",
       "      <td>-1.064562</td>\n",
       "      <td>True</td>\n",
       "      <td>0.002735</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2373009</th>\n",
       "      <td>1.0</td>\n",
       "      <td>True</td>\n",
       "      <td>294.888763</td>\n",
       "      <td>-1.888014</td>\n",
       "      <td>True</td>\n",
       "      <td>-0.000262</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2373010</th>\n",
       "      <td>1.0</td>\n",
       "      <td>True</td>\n",
       "      <td>342.173950</td>\n",
       "      <td>1.197824</td>\n",
       "      <td>True</td>\n",
       "      <td>-0.001742</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2373011</th>\n",
       "      <td>1.0</td>\n",
       "      <td>True</td>\n",
       "      <td>456.778595</td>\n",
       "      <td>-1.523358</td>\n",
       "      <td>True</td>\n",
       "      <td>0.006766</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2373012</th>\n",
       "      <td>1.0</td>\n",
       "      <td>True</td>\n",
       "      <td>292.133850</td>\n",
       "      <td>-1.054275</td>\n",
       "      <td>True</td>\n",
       "      <td>0.001491</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2373013 rows Ã— 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         evtWeight  y_passOQ        y_pt     y_eta  y_isTruthMatchedPhoton  \\\n",
       "0              1.0      True  409.209595  1.753538                    True   \n",
       "1              1.0      True  315.108459  0.265245                    True   \n",
       "2              1.0      True  470.509003  1.089436                    True   \n",
       "3              1.0      True  317.702118 -0.267235                    True   \n",
       "4              1.0      True  292.126465  0.317192                    True   \n",
       "...            ...       ...         ...       ...                     ...   \n",
       "2373008        1.0      True  323.109375 -1.064562                    True   \n",
       "2373009        1.0      True  294.888763 -1.888014                    True   \n",
       "2373010        1.0      True  342.173950  1.197824                    True   \n",
       "2373011        1.0      True  456.778595 -1.523358                    True   \n",
       "2373012        1.0      True  292.133850 -1.054275                    True   \n",
       "\n",
       "           y_Rhad  \n",
       "0        0.004472  \n",
       "1        0.008007  \n",
       "2       -0.003068  \n",
       "3        0.009505  \n",
       "4        0.001446  \n",
       "...           ...  \n",
       "2373008  0.002735  \n",
       "2373009 -0.000262  \n",
       "2373010 -0.001742  \n",
       "2373011  0.006766  \n",
       "2373012  0.001491  \n",
       "\n",
       "[2373013 rows x 6 columns]"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_photon#.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8ac721de",
   "metadata": {},
   "source": [
    "### $\\gamma$_R$_{had}$ histogram"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "ccfc3cec",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Histogram(Regular(200, -0.2, 5), storage=Weight()) # Sum: WeightedSum(value=2.3724e+06, variance=2.3724e+06) (WeightedSum(value=2.37301e+06, variance=2.37301e+06) with flow)"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "hist_1 = bh.Histogram(bh.axis.Regular(200,-.2,5),storage=bh.storage.Weight()) \n",
    "hist_1.fill(df_photon.y_Rhad, weight=df_photon.evtWeight)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "a78d2548",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 648x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.close('all')\n",
    "plt.figure(figsize=(9,6))\n",
    "# draw errobars, use the sqrt error. You can use what you want there\n",
    "# poissonian 1 sigma intervals would make more sense\n",
    "plt.errorbar(hist_1.axes[0].centers, hist_1.view().value, yerr=np.sqrt(hist_1.view().variance),\n",
    "         fmt='r.',mec='black',mfc='black',ecolor='black',ms=12,label=r'single $\\gamma$')\n",
    "\n",
    "ax = plt.gca()\n",
    "ax.set_xlabel(r\"$R_{had}$\",position=(1,1),horizontalalignment='right')\n",
    "ax.set_ylabel(\"Number of events\",position=(0,1),horizontalalignment='right')\n",
    "ax.legend()\n",
    "plt.yscale('log')\n",
    "\n",
    "top = 2*max(hist_1.view().value)\n",
    "bottom = 1;\n",
    "left = -.2; right = 5\n",
    "ax.set_ylim(bottom=bottom); ax.set_ylim(top=top); ax.set_xlim(left=left); ax.set_xlim(right=right)\n",
    "\n",
    "# ax.text((right-left)*0.02+left, (top-bottom)*0.9+bottom, 'ATLAS',style = 'italic',fontweight='bold',fontsize=20,horizontalalignment='left')\n",
    "# ax.text((right-left)*0.165+left, (top-bottom)*0.9+bottom, 'Simulation Internal',fontsize=20,horizontalalignment='left')\n",
    "# ax.text((right-left)*0.02+left, (top-bottom)*0.8+bottom, r'$\\sqrt{s} =$'+'13.6 TeV, xx fb'+r'$^{-1}$',fontsize=20,horizontalalignment='left')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "6599b4c3",
   "metadata": {},
   "outputs": [],
   "source": [
    "#why are there some counts at negative R_had, but only very small negative R_had?\n",
    "#is this a physics thing? like you're not going to have more energy deposited in had. calorimeter than EMcal for a photon?\n",
    "\n",
    "#but where does a negative come from for a ratio? (neg. reading in had. calorimemter?)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aa721eea",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "e7179021",
   "metadata": {},
   "outputs": [],
   "source": [
    "photonfile = uproot.open(folder+'/mc21_gammajet_v02/PyPt17_mc21_800664.root', entrystop=1000)\n",
    "\n",
    "# photonfile['SinglePhoton'].fBranches\n",
    "# photonfile['SinglePhoton'].typenames()\n",
    "\n",
    "singlephot = photonfile['SinglePhoton']\n",
    "\n",
    "singlephot.arrays?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "b14e93fb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# singlephot.arrays(branches,library='np')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f4ff33ab",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "4e9413c0",
   "metadata": {},
   "source": [
    "### y_pt historgram"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "1236ef6f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Histogram(Regular(200, 0, 600), storage=Weight()) # Sum: WeightedSum(value=2.37295e+06, variance=2.37295e+06) (WeightedSum(value=2.37301e+06, variance=2.37301e+06) with flow)"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hist_pt = bh.Histogram(bh.axis.Regular(200,0,600),storage=bh.storage.Weight()) \n",
    "hist_pt.fill(df_photon.y_pt, weight=df_photon.evtWeight)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "6e3a11fb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 648x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.close('all')\n",
    "plt.figure(figsize=(9,6))\n",
    "# draw errobars, use the sqrt error. You can use what you want there\n",
    "# poissonian 1 sigma intervals would make more sense\n",
    "plt.errorbar(hist_pt.axes[0].centers, hist_pt.view().value, yerr=np.sqrt(hist_pt.view().variance),\n",
    "         fmt='r.',mec='black',mfc='black',ecolor='black',ms=12,label=r'single $\\gamma$')\n",
    "\n",
    "ax = plt.gca()\n",
    "ax.set_xlabel(r\"$pt$\",position=(1,1),horizontalalignment='right')\n",
    "ax.set_ylabel(\"Number of events\",position=(0,1),horizontalalignment='right')\n",
    "ax.legend()\n",
    "plt.yscale('log')\n",
    "\n",
    "top = 1.2*max(hist_pt.view().value)\n",
    "bottom = 1;\n",
    "left = 0; right = 600\n",
    "ax.set_ylim(bottom=bottom); ax.set_ylim(top=top); ax.set_xlim(left=left); ax.set_xlim(right=right)\n",
    "\n",
    "# ax.text((right-left)*0.02+left, (top-bottom)*0.9+bottom, 'ATLAS',style = 'italic',fontweight='bold',fontsize=20,horizontalalignment='left')\n",
    "# ax.text((right-left)*0.165+left, (top-bottom)*0.9+bottom, 'Simulation Internal',fontsize=20,horizontalalignment='left')\n",
    "# ax.text((right-left)*0.02+left, (top-bottom)*0.8+bottom, r'$\\sqrt{s} =$'+'13.6 TeV, xx fb'+r'$^{-1}$',fontsize=20,horizontalalignment='left')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2d81e7be",
   "metadata": {},
   "outputs": [],
   "source": [
    "#is pt related to the energy?\n",
    "# and this is one of the slices?"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
