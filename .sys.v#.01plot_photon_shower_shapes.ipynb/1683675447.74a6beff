{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "058a6d35",
   "metadata": {},
   "outputs": [],
   "source": [
    "import uproot\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import boost_histogram as bh\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "48d58b33",
   "metadata": {},
   "outputs": [],
   "source": [
    "folder = '/eos/atlas/atlascerngroupdisk/perf-egamma/InclusivePhotons'\n",
    "branches = ['evtWeight', 'y_passOQ', 'y_pt', 'y_eta', 'y_isTruthMatchedPhoton', 'y_Rhad']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "5eb310f1",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_photon = uproot.open(folder+'/mc21_gammajet_v02/PyPt17_mc21_800664.root', entrystop=1000)['SinglePhoton'].arrays(branches,library=\"pd\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "2bc02531",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>evtWeight</th>\n",
       "      <th>y_passOQ</th>\n",
       "      <th>y_pt</th>\n",
       "      <th>y_eta</th>\n",
       "      <th>y_isTruthMatchedPhoton</th>\n",
       "      <th>y_Rhad</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>True</td>\n",
       "      <td>409.209595</td>\n",
       "      <td>1.753538</td>\n",
       "      <td>True</td>\n",
       "      <td>0.004472</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "      <td>True</td>\n",
       "      <td>315.108459</td>\n",
       "      <td>0.265245</td>\n",
       "      <td>True</td>\n",
       "      <td>0.008007</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.0</td>\n",
       "      <td>True</td>\n",
       "      <td>470.509003</td>\n",
       "      <td>1.089436</td>\n",
       "      <td>True</td>\n",
       "      <td>-0.003068</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.0</td>\n",
       "      <td>True</td>\n",
       "      <td>317.702118</td>\n",
       "      <td>-0.267235</td>\n",
       "      <td>True</td>\n",
       "      <td>0.009505</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.0</td>\n",
       "      <td>True</td>\n",
       "      <td>292.126465</td>\n",
       "      <td>0.317192</td>\n",
       "      <td>True</td>\n",
       "      <td>0.001446</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2373008</th>\n",
       "      <td>1.0</td>\n",
       "      <td>True</td>\n",
       "      <td>323.109375</td>\n",
       "      <td>-1.064562</td>\n",
       "      <td>True</td>\n",
       "      <td>0.002735</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2373009</th>\n",
       "      <td>1.0</td>\n",
       "      <td>True</td>\n",
       "      <td>294.888763</td>\n",
       "      <td>-1.888014</td>\n",
       "      <td>True</td>\n",
       "      <td>-0.000262</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2373010</th>\n",
       "      <td>1.0</td>\n",
       "      <td>True</td>\n",
       "      <td>342.173950</td>\n",
       "      <td>1.197824</td>\n",
       "      <td>True</td>\n",
       "      <td>-0.001742</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2373011</th>\n",
       "      <td>1.0</td>\n",
       "      <td>True</td>\n",
       "      <td>456.778595</td>\n",
       "      <td>-1.523358</td>\n",
       "      <td>True</td>\n",
       "      <td>0.006766</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2373012</th>\n",
       "      <td>1.0</td>\n",
       "      <td>True</td>\n",
       "      <td>292.133850</td>\n",
       "      <td>-1.054275</td>\n",
       "      <td>True</td>\n",
       "      <td>0.001491</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2373013 rows Ã— 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         evtWeight  y_passOQ        y_pt     y_eta  y_isTruthMatchedPhoton  \\\n",
       "0              1.0      True  409.209595  1.753538                    True   \n",
       "1              1.0      True  315.108459  0.265245                    True   \n",
       "2              1.0      True  470.509003  1.089436                    True   \n",
       "3              1.0      True  317.702118 -0.267235                    True   \n",
       "4              1.0      True  292.126465  0.317192                    True   \n",
       "...            ...       ...         ...       ...                     ...   \n",
       "2373008        1.0      True  323.109375 -1.064562                    True   \n",
       "2373009        1.0      True  294.888763 -1.888014                    True   \n",
       "2373010        1.0      True  342.173950  1.197824                    True   \n",
       "2373011        1.0      True  456.778595 -1.523358                    True   \n",
       "2373012        1.0      True  292.133850 -1.054275                    True   \n",
       "\n",
       "           y_Rhad  \n",
       "0        0.004472  \n",
       "1        0.008007  \n",
       "2       -0.003068  \n",
       "3        0.009505  \n",
       "4        0.001446  \n",
       "...           ...  \n",
       "2373008  0.002735  \n",
       "2373009 -0.000262  \n",
       "2373010 -0.001742  \n",
       "2373011  0.006766  \n",
       "2373012  0.001491  \n",
       "\n",
       "[2373013 rows x 6 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_photon#.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ba21e598",
   "metadata": {},
   "source": [
    "### $\\gamma$_R$_{had}$ histogram"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "90d4722f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Histogram(Regular(200, -0.5, 5), storage=Weight()) # Sum: WeightedSum(value=2.3724e+06, variance=2.3724e+06) (WeightedSum(value=2.37301e+06, variance=2.37301e+06) with flow)"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "hist_1 = bh.Histogram(bh.axis.Regular(200,-.5,5),storage=bh.storage.Weight()) \n",
    "hist_1.fill(df_photon.y_Rhad, weight=df_photon.evtWeight)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "0c6c3612",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 648x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.close('all')\n",
    "plt.figure(figsize=(9,6))\n",
    "# draw errobars, use the sqrt error. You can use what you want there\n",
    "# poissonian 1 sigma intervals would make more sense\n",
    "plt.errorbar(hist_1.axes[0].centers, hist_1.view().value, yerr=np.sqrt(hist_1.view().variance),\n",
    "         fmt='r.',mec='black',mfc='black',ecolor='black',ms=12,label=r'single $\\gamma$')\n",
    "\n",
    "ax = plt.gca()\n",
    "ax.set_xlabel(r\"$R_{had}$\",position=(1,1),horizontalalignment='right')\n",
    "ax.set_ylabel(\"Number of events\",position=(0,1),horizontalalignment='right')\n",
    "ax.legend()\n",
    "plt.yscale('log')\n",
    "\n",
    "top = 2*max(hist_1.view().value)\n",
    "bottom = 1;\n",
    "left = -.5; right = 5\n",
    "ax.set_ylim(bottom=bottom); ax.set_ylim(top=top); ax.set_xlim(left=left); ax.set_xlim(right=right)\n",
    "\n",
    "# ax.text((right-left)*0.02+left, (top-bottom)*0.9+bottom, 'ATLAS',style = 'italic',fontweight='bold',fontsize=20,horizontalalignment='left')\n",
    "# ax.text((right-left)*0.165+left, (top-bottom)*0.9+bottom, 'Simulation Internal',fontsize=20,horizontalalignment='left')\n",
    "# ax.text((right-left)*0.02+left, (top-bottom)*0.8+bottom, r'$\\sqrt{s} =$'+'13.6 TeV, xx fb'+r'$^{-1}$',fontsize=20,horizontalalignment='left')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "06089118",
   "metadata": {},
   "source": [
    "why are there some counts at negative R_had, but only very small negative R_had?\n",
    "\n",
    "is this a physics thing? like you're not going to have more energy deposited in had. calorimeter than EMcal for a photon?\n",
    "\n",
    "but where does a negative come from for a ratio? (neg. reading in had. calorimemter?)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "00cfcb6c",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ed0d4f1b",
   "metadata": {},
   "outputs": [],
   "source": [
    "photonfile = uproot.open(folder+'/mc21_gammajet_v02/PyPt17_mc21_800664.root', entrystop=1000)\n",
    "\n",
    "# photonfile['SinglePhoton'].fBranches\n",
    "# photonfile['SinglePhoton'].typenames()\n",
    "\n",
    "singlephot = photonfile['SinglePhoton']\n",
    "\n",
    "# singlephot.arrays?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "848deeb4",
   "metadata": {},
   "outputs": [],
   "source": [
    "# singlephot.arrays(branches,library='np')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "775d20ba",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "f6230c5e",
   "metadata": {},
   "source": [
    "### y_pt historgram"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "91b19fc3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Histogram(Regular(200, 0, 600), storage=Weight()) # Sum: WeightedSum(value=2.37295e+06, variance=2.37295e+06) (WeightedSum(value=2.37301e+06, variance=2.37301e+06) with flow)"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hist_pt = bh.Histogram(bh.axis.Regular(200,0,600),storage=bh.storage.Weight()) \n",
    "hist_pt.fill(df_photon.y_pt, weight=df_photon.evtWeight)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "88f02a9d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 648x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.close('all')\n",
    "plt.figure(figsize=(9,6))\n",
    "# draw errobars, use the sqrt error. You can use what you want there\n",
    "# poissonian 1 sigma intervals would make more sense\n",
    "plt.errorbar(hist_pt.axes[0].centers, hist_pt.view().value, yerr=np.sqrt(hist_pt.view().variance),\n",
    "         fmt='r.',mec='black',mfc='black',ecolor='black',ms=12,label=r'single $\\gamma$')\n",
    "\n",
    "ax = plt.gca()\n",
    "ax.set_xlabel(r\"$pt$\",position=(1,1),horizontalalignment='right')\n",
    "ax.set_ylabel(\"Number of events\",position=(0,1),horizontalalignment='right')\n",
    "ax.legend()\n",
    "plt.yscale('log')\n",
    "\n",
    "top = 1.2*max(hist_pt.view().value)\n",
    "bottom = 1;\n",
    "left = 0; right = 600\n",
    "ax.set_ylim(bottom=bottom); ax.set_ylim(top=top); ax.set_xlim(left=left); ax.set_xlim(right=right)\n",
    "\n",
    "# ax.text((right-left)*0.02+left, (top-bottom)*0.9+bottom, 'ATLAS',style = 'italic',fontweight='bold',fontsize=20,horizontalalignment='left')\n",
    "# ax.text((right-left)*0.165+left, (top-bottom)*0.9+bottom, 'Simulation Internal',fontsize=20,horizontalalignment='left')\n",
    "# ax.text((right-left)*0.02+left, (top-bottom)*0.8+bottom, r'$\\sqrt{s} =$'+'13.6 TeV, xx fb'+r'$^{-1}$',fontsize=20,horizontalalignment='left')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6e3e7c52",
   "metadata": {},
   "source": [
    "is pt related to the energy?\n",
    "\n",
    "and this is one of the slices?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4e144050",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "20a09531",
   "metadata": {},
   "source": [
    "### histogram of photon $\\eta$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "f41bb515",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Histogram(Regular(100, -3, 3), storage=Weight()) # Sum: WeightedSum(value=2.37301e+06, variance=2.37301e+06)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hist_eta = bh.Histogram(bh.axis.Regular(100,-3,3),storage=bh.storage.Weight()) \n",
    "hist_eta.fill(df_photon.y_eta, weight=df_photon.evtWeight)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "dc93e2ba",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 648x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.close('all')\n",
    "plt.figure(figsize=(9,6))\n",
    "# draw errobars, use the sqrt error. You can use what you want there\n",
    "# poissonian 1 sigma intervals would make more sense\n",
    "plt.errorbar(hist_eta.axes[0].centers, hist_eta.view().value, yerr=np.sqrt(hist_eta.view().variance),\n",
    "         fmt='r.',mec='black',mfc='black',ecolor='black',ms=12,label=r'single $\\gamma$')\n",
    "\n",
    "ax = plt.gca()\n",
    "ax.set_xlabel(r\"$\\eta$\",position=(1,1),horizontalalignment='right')\n",
    "ax.set_ylabel(\"Number of events\",position=(0,1),horizontalalignment='right')\n",
    "ax.legend()\n",
    "plt.yscale('log')\n",
    "\n",
    "top = 1.2*max(hist_eta.view().value)\n",
    "bottom = 1;\n",
    "left = -3; right = 3\n",
    "ax.set_ylim(bottom=bottom); ax.set_ylim(top=top); ax.set_xlim(left=left); ax.set_xlim(right=right)\n",
    "\n",
    "# ax.text((right-left)*0.02+left, (top-bottom)*0.9+bottom, 'ATLAS',style = 'italic',fontweight='bold',fontsize=20,horizontalalignment='left')\n",
    "# ax.text((right-left)*0.165+left, (top-bottom)*0.9+bottom, 'Simulation Internal',fontsize=20,horizontalalignment='left')\n",
    "# ax.text((right-left)*0.02+left, (top-bottom)*0.8+bottom, r'$\\sqrt{s} =$'+'13.6 TeV, xx fb'+r'$^{-1}$',fontsize=20,horizontalalignment='left')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "713f9a48",
   "metadata": {},
   "source": [
    "interesting pattern, is this to do with the location of the detectors? Like gap between end caps and others\n",
    "\n",
    "also, eta is starting from 0 at at vertical, right? (even tho images show starting from horzontal (along beam))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b2637be7",
   "metadata": {},
   "source": [
    "# Now other photon variables"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e2eb8f51",
   "metadata": {},
   "source": [
    "look at paper, etc. and match labels of branches\n",
    "\n",
    "then do jet-gamma vs. jet-jet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "7c45cb6a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['mcid',\n",
       " 'mcWeight',\n",
       " 'xs',\n",
       " 'kf',\n",
       " 'ge',\n",
       " 'nEvents',\n",
       " 'intLumi',\n",
       " 'evtWeight',\n",
       " 'evtWeightNoPU',\n",
       " 'xsecWeight',\n",
       " 'puWeight',\n",
       " 'puWeight_down',\n",
       " 'puWeight_up',\n",
       " 'trigpuWeight',\n",
       " 'beamSpotSize_weight',\n",
       " 'yWeight',\n",
       " 'PRWHash',\n",
       " 'lumiXsecWeightOriginal',\n",
       " 'dataWeightPtBin',\n",
       " 'dataWeightPtBinNoMu',\n",
       " 'dataPrescale',\n",
       " 'dataWeightThreshold',\n",
       " 'dataWeightThresholdNoMu',\n",
       " 'acceptEventThreshold',\n",
       " 'acceptEventPtBin',\n",
       " 'evt_lb',\n",
       " 'evt_runNo',\n",
       " 'evt_eventNo',\n",
       " 'evt_mu',\n",
       " 'evt_npv',\n",
       " 'y_n',\n",
       " 'y_passOQ',\n",
       " 'y_pt',\n",
       " 'y_eta',\n",
       " 'y_phi',\n",
       " 'y_phi_cl',\n",
       " 'y_e',\n",
       " 'y_pt_cl',\n",
       " 'y_eta_cl',\n",
       " 'y_e_cl',\n",
       " 'y_eta_cl_s2',\n",
       " 'y_eta_cl_s1',\n",
       " 'y_convType',\n",
       " 'y_convRadius',\n",
       " 'y_isTruthMatchedPhoton',\n",
       " 'y_truth_convType',\n",
       " 'y_truth_convRadius',\n",
       " 'y_truth_type',\n",
       " 'y_truth_origin',\n",
       " 'y_truth_pt',\n",
       " 'y_truth_eta',\n",
       " 'y_truth_phi',\n",
       " 'y_truth_e',\n",
       " 'y_truth_pdgId',\n",
       " 'y_truth_mother_pdgId',\n",
       " 'y2_pt',\n",
       " 'y2_eta',\n",
       " 'y2_phi',\n",
       " 'y2_e',\n",
       " 'y2_convType',\n",
       " 'y2_convRadius',\n",
       " 'y_ptcone20',\n",
       " 'y_ptcone40',\n",
       " 'y_topoetcone20',\n",
       " 'y_topoetcone30',\n",
       " 'y_topoetcone40',\n",
       " 'y_topoetcone20_DDcorr',\n",
       " 'y_topoetcone40_DDcorr',\n",
       " 'y_ptcone20_TightTTVA_pt500',\n",
       " 'y_ptcone20_TightTTVA_pt1000',\n",
       " 'y_ptvarcone30_TightTTVA_pt500',\n",
       " 'y_ptvarcone30_TightTTVA_pt1000',\n",
       " 'y_neflowisol20',\n",
       " 'y_neflowisol30',\n",
       " 'y_neflowisol40',\n",
       " 'y_topoetconecoreConeEnergyCorrection',\n",
       " 'y_topoetconecoreConeSCEnergyCorrection',\n",
       " 'y_core57cellsEnergyCorrection',\n",
       " 'y_topoetcone20ptCorrection',\n",
       " 'y_topoetcone40ptCorrection',\n",
       " 'y_topoetcone20ptLogCorrection',\n",
       " 'y_topoetcone40ptLogCorrection',\n",
       " 'y_neflowisolcoreConeEnergyCorrection',\n",
       " 'y_SCsubtraction',\n",
       " 'y_topoetcone20_etaEDParPU_corr',\n",
       " 'y_topoetcone40_etaEDParPU_corr',\n",
       " 'y_topoetcone20_etaEDParPU_MC_corr',\n",
       " 'y_topoetcone40_etaEDParPU_MC_corr',\n",
       " 'y_topoetcone20_oldPU_corr',\n",
       " 'y_topoetcone40_oldPU_corr',\n",
       " 'y_topoetcone20_SCsub_etaEDParPU',\n",
       " 'y_topoetcone40_SCsub_etaEDParPU',\n",
       " 'y_topoetcone20_IsoCorrTool',\n",
       " 'y_topoetcone40_IsoCorrTool',\n",
       " 'y_ptLeak20',\n",
       " 'y_ptLeak40',\n",
       " 'y_ptconecore',\n",
       " 'evt_centralDensity',\n",
       " 'evt_fwdDensity',\n",
       " 'evt_neflowiso_centralDensity',\n",
       " 'evt_neflowiso_fwdDensity',\n",
       " 'y_iso_FixedCutLoose',\n",
       " 'y_iso_FixedCutTight',\n",
       " 'y_iso_FixedCutTightCaloOnly',\n",
       " 'y_tptcone20',\n",
       " 'y_tptcone30',\n",
       " 'y_tptcone40',\n",
       " 'y_tetcone20',\n",
       " 'y_tetcone30',\n",
       " 'y_tetcone40',\n",
       " 'evt_SherpaClass',\n",
       " 'ty_drmin',\n",
       " 'y_IsEMTight',\n",
       " 'y_myIsEMTight',\n",
       " 'y_IsTight',\n",
       " 'y_IsEMLoose',\n",
       " 'y_IsLoose',\n",
       " 'y_IsLoosePrime2',\n",
       " 'y_IsLoosePrime3',\n",
       " 'y_IsLoosePrime4',\n",
       " 'y_IsLoosePrime5',\n",
       " 'y_E1E2',\n",
       " 'y_E1E2_raw',\n",
       " 'y_E0',\n",
       " 'y_E0_raw',\n",
       " 'y_E1',\n",
       " 'y_E1_raw',\n",
       " 'y_E2',\n",
       " 'y_E2_raw',\n",
       " 'y_E3',\n",
       " 'y_E3_raw',\n",
       " 'y_Reta',\n",
       " 'y_Rphi',\n",
       " 'y_weta2',\n",
       " 'y_fracs1',\n",
       " 'y_weta1',\n",
       " 'y_emaxs1',\n",
       " 'y_f1',\n",
       " 'y_wtots1',\n",
       " 'y_Rhad',\n",
       " 'y_Rhad1',\n",
       " 'y_Eratio',\n",
       " 'y_e277',\n",
       " 'y_deltae',\n",
       " 'y_noFF_IsEMTight',\n",
       " 'y_noFF_IsTight',\n",
       " 'y_noFF_IsLoose',\n",
       " 'y_noFF_Reta',\n",
       " 'y_noFF_Rphi',\n",
       " 'y_noFF_weta2',\n",
       " 'y_noFF_fracs1',\n",
       " 'y_noFF_weta1',\n",
       " 'y_noFF_emaxs1',\n",
       " 'y_noFF_f1',\n",
       " 'y_noFF_wtots1',\n",
       " 'y_noFF_Rhad',\n",
       " 'y_noFF_Rhad1',\n",
       " 'y_noFF_Eratio',\n",
       " 'y_noFF_e277',\n",
       " 'y_noFF_deltae',\n",
       " 'y_maxEcell_E',\n",
       " 'y_maxEcell_gain',\n",
       " 'y_maxEcell_time',\n",
       " 'y_maxEcell_x',\n",
       " 'y_maxEcell_y',\n",
       " 'y_maxEcell_z',\n",
       " 'j_n',\n",
       " 'j0_pt',\n",
       " 'j0_eta',\n",
       " 'j0_phi',\n",
       " 'j0_e',\n",
       " 'y_j0_dphi',\n",
       " 'y_j0_dr',\n",
       " 'j1_pt',\n",
       " 'j1_eta',\n",
       " 'j1_phi',\n",
       " 'j1_e',\n",
       " 'y_j1_dphi',\n",
       " 'y_j1_dr',\n",
       " 'jmin_pt',\n",
       " 'jmin_eta',\n",
       " 'jmin_phi',\n",
       " 'jmin_e',\n",
       " 'y_jmin_dr',\n",
       " 'y_jmin_dphi',\n",
       " 'y_OR_j_dr',\n",
       " 'y_OR_j_dpt',\n",
       " 'y_caloPointing_z',\n",
       " 'y_caloPointing_z_err',\n",
       " 'y_convPointing_z',\n",
       " 'y_convPointing_z_err',\n",
       " 'y2_caloPointing_z',\n",
       " 'y2_caloPointing_z_err',\n",
       " 'y2_convPointing_z',\n",
       " 'y2_convPointing_z_err',\n",
       " 'vtx_type',\n",
       " 'vtx_x',\n",
       " 'vtx_y',\n",
       " 'vtx_z',\n",
       " 'vtx_phi',\n",
       " 'vtx_eta',\n",
       " 'vtx_sumPt',\n",
       " 'vtx_sumPt2',\n",
       " 'y_vtx_dphi',\n",
       " 'j_pTavg',\n",
       " 'lj_truth_pt',\n",
       " 'y_topoCluster0_secondLambda',\n",
       " 'y_topoCluster0_secondR',\n",
       " 'y_topoCluster0_centerMag',\n",
       " 'y_topoCluster0_centerLambda',\n",
       " 'y_topoCluster0_isolation',\n",
       " 'y_topoCluster0_engBadCells',\n",
       " 'y_topoCluster0_nBadCells',\n",
       " 'y_topoCluster0_badLarQFrac',\n",
       " 'y_topoCluster0_engPos',\n",
       " 'y_topoCluster0_avgLarQ',\n",
       " 'y_topoCluster0_avgTileQ',\n",
       " 'y_topoCluster0_emProbability',\n",
       " 'y_nTopoClusters',\n",
       " 'HLT_g100_loose',\n",
       " 'HLT_g10_loose',\n",
       " 'HLT_g120_loose',\n",
       " 'HLT_g140_loose',\n",
       " 'HLT_g15_loose_L1EM7',\n",
       " 'HLT_g20_loose_L1EM12',\n",
       " 'HLT_g25_loose_L1EM15',\n",
       " 'HLT_g35_loose_L1EM15',\n",
       " 'HLT_g40_loose_L1EM15',\n",
       " 'HLT_g45_loose_L1EM15',\n",
       " 'HLT_g50_loose_L1EM15',\n",
       " 'HLT_g60_loose',\n",
       " 'HLT_g70_loose',\n",
       " 'HLT_g80_loose',\n",
       " 'y_IsLoose_pt',\n",
       " 'y_IsMedium_pt',\n",
       " 'track_pt',\n",
       " 'track_eta',\n",
       " 'track_phi',\n",
       " 'track_e',\n",
       " 'track_theta',\n",
       " 'track_qOverP',\n",
       " 'track_z0',\n",
       " 'track_d0',\n",
       " 'track_numberOfPixelHits',\n",
       " 'track_numberOfPixelHoles',\n",
       " 'track_numberOfSCTHits',\n",
       " 'track_numberOfSCTHoles',\n",
       " 'track_numberOfPixelSharedHits',\n",
       " 'track_numberOfSCTSharedHits',\n",
       " 'lumiXsecWeight',\n",
       " 'lumiXsecWeightNoPU',\n",
       " 'lumiXsecWeightCheck',\n",
       " 'mcTotWeight',\n",
       " 'mcTotWeightNoPU',\n",
       " 'mcTotWeightCheck',\n",
       " 'mcTotWeightNoPU_PIDuse',\n",
       " 'sumWeights']"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# branch labels:\n",
    "available_btanches = singlephot.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "f764441a",
   "metadata": {},
   "outputs": [],
   "source": [
    "#from paper:\n",
    "branchnames = ['y_Reta', 'y_weta2', 'y_Rphi', 'y_wtots1', 'y_Eratio', 'y_f1']\n",
    "#y_ws3?  y_fside? y_DeltaEs?  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "b2ecb1e2",
   "metadata": {},
   "outputs": [],
   "source": [
    "##^ look at what they represent^"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "369cbd7d",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "209434ea",
   "metadata": {},
   "source": [
    "# Comparing gamma-jet to jet-jet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "a5fafd04",
   "metadata": {},
   "outputs": [],
   "source": [
    "gamjetbranches = branches+branchnames"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "37609e48",
   "metadata": {},
   "outputs": [],
   "source": [
    "gamjet_df = singlephot.arrays(gamjetbranches, library='pd')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "aeeae694",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>evtWeight</th>\n",
       "      <th>y_passOQ</th>\n",
       "      <th>y_pt</th>\n",
       "      <th>y_eta</th>\n",
       "      <th>y_isTruthMatchedPhoton</th>\n",
       "      <th>y_Rhad</th>\n",
       "      <th>y_Reta</th>\n",
       "      <th>y_weta2</th>\n",
       "      <th>y_Rphi</th>\n",
       "      <th>y_wtots1</th>\n",
       "      <th>y_Eratio</th>\n",
       "      <th>y_f1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>True</td>\n",
       "      <td>409.209595</td>\n",
       "      <td>1.753538</td>\n",
       "      <td>True</td>\n",
       "      <td>0.004472</td>\n",
       "      <td>0.964968</td>\n",
       "      <td>0.009346</td>\n",
       "      <td>0.978234</td>\n",
       "      <td>2.002914</td>\n",
       "      <td>0.989079</td>\n",
       "      <td>0.081320</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "      <td>True</td>\n",
       "      <td>315.108459</td>\n",
       "      <td>0.265245</td>\n",
       "      <td>True</td>\n",
       "      <td>0.008007</td>\n",
       "      <td>0.975056</td>\n",
       "      <td>0.008734</td>\n",
       "      <td>0.988232</td>\n",
       "      <td>1.719431</td>\n",
       "      <td>0.989451</td>\n",
       "      <td>0.097205</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.0</td>\n",
       "      <td>True</td>\n",
       "      <td>470.509003</td>\n",
       "      <td>1.089436</td>\n",
       "      <td>True</td>\n",
       "      <td>-0.003068</td>\n",
       "      <td>0.961069</td>\n",
       "      <td>0.010051</td>\n",
       "      <td>0.966097</td>\n",
       "      <td>2.142255</td>\n",
       "      <td>0.998809</td>\n",
       "      <td>0.218940</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.0</td>\n",
       "      <td>True</td>\n",
       "      <td>317.702118</td>\n",
       "      <td>-0.267235</td>\n",
       "      <td>True</td>\n",
       "      <td>0.009505</td>\n",
       "      <td>0.976663</td>\n",
       "      <td>0.008390</td>\n",
       "      <td>0.984343</td>\n",
       "      <td>1.783198</td>\n",
       "      <td>0.939906</td>\n",
       "      <td>0.056986</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.0</td>\n",
       "      <td>True</td>\n",
       "      <td>292.126465</td>\n",
       "      <td>0.317192</td>\n",
       "      <td>True</td>\n",
       "      <td>0.001446</td>\n",
       "      <td>0.970260</td>\n",
       "      <td>0.008896</td>\n",
       "      <td>0.981166</td>\n",
       "      <td>1.699356</td>\n",
       "      <td>0.995281</td>\n",
       "      <td>0.196796</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2373008</th>\n",
       "      <td>1.0</td>\n",
       "      <td>True</td>\n",
       "      <td>323.109375</td>\n",
       "      <td>-1.064562</td>\n",
       "      <td>True</td>\n",
       "      <td>0.002735</td>\n",
       "      <td>0.961619</td>\n",
       "      <td>0.009865</td>\n",
       "      <td>0.973804</td>\n",
       "      <td>2.317394</td>\n",
       "      <td>0.990079</td>\n",
       "      <td>0.178485</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2373009</th>\n",
       "      <td>1.0</td>\n",
       "      <td>True</td>\n",
       "      <td>294.888763</td>\n",
       "      <td>-1.888014</td>\n",
       "      <td>True</td>\n",
       "      <td>-0.000262</td>\n",
       "      <td>0.943420</td>\n",
       "      <td>0.010265</td>\n",
       "      <td>0.965883</td>\n",
       "      <td>1.660011</td>\n",
       "      <td>0.987520</td>\n",
       "      <td>0.240984</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2373010</th>\n",
       "      <td>1.0</td>\n",
       "      <td>True</td>\n",
       "      <td>342.173950</td>\n",
       "      <td>1.197824</td>\n",
       "      <td>True</td>\n",
       "      <td>-0.001742</td>\n",
       "      <td>0.960052</td>\n",
       "      <td>0.009196</td>\n",
       "      <td>0.974733</td>\n",
       "      <td>2.107327</td>\n",
       "      <td>0.990309</td>\n",
       "      <td>0.051357</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2373011</th>\n",
       "      <td>1.0</td>\n",
       "      <td>True</td>\n",
       "      <td>456.778595</td>\n",
       "      <td>-1.523358</td>\n",
       "      <td>True</td>\n",
       "      <td>0.006766</td>\n",
       "      <td>0.973274</td>\n",
       "      <td>0.008938</td>\n",
       "      <td>0.983277</td>\n",
       "      <td>1.997238</td>\n",
       "      <td>0.993593</td>\n",
       "      <td>0.098071</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2373012</th>\n",
       "      <td>1.0</td>\n",
       "      <td>True</td>\n",
       "      <td>292.133850</td>\n",
       "      <td>-1.054275</td>\n",
       "      <td>True</td>\n",
       "      <td>0.001491</td>\n",
       "      <td>0.966683</td>\n",
       "      <td>0.009228</td>\n",
       "      <td>0.975586</td>\n",
       "      <td>2.369854</td>\n",
       "      <td>0.977818</td>\n",
       "      <td>0.076832</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2373013 rows Ã— 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         evtWeight  y_passOQ        y_pt     y_eta  y_isTruthMatchedPhoton  \\\n",
       "0              1.0      True  409.209595  1.753538                    True   \n",
       "1              1.0      True  315.108459  0.265245                    True   \n",
       "2              1.0      True  470.509003  1.089436                    True   \n",
       "3              1.0      True  317.702118 -0.267235                    True   \n",
       "4              1.0      True  292.126465  0.317192                    True   \n",
       "...            ...       ...         ...       ...                     ...   \n",
       "2373008        1.0      True  323.109375 -1.064562                    True   \n",
       "2373009        1.0      True  294.888763 -1.888014                    True   \n",
       "2373010        1.0      True  342.173950  1.197824                    True   \n",
       "2373011        1.0      True  456.778595 -1.523358                    True   \n",
       "2373012        1.0      True  292.133850 -1.054275                    True   \n",
       "\n",
       "           y_Rhad    y_Reta   y_weta2    y_Rphi  y_wtots1  y_Eratio      y_f1  \n",
       "0        0.004472  0.964968  0.009346  0.978234  2.002914  0.989079  0.081320  \n",
       "1        0.008007  0.975056  0.008734  0.988232  1.719431  0.989451  0.097205  \n",
       "2       -0.003068  0.961069  0.010051  0.966097  2.142255  0.998809  0.218940  \n",
       "3        0.009505  0.976663  0.008390  0.984343  1.783198  0.939906  0.056986  \n",
       "4        0.001446  0.970260  0.008896  0.981166  1.699356  0.995281  0.196796  \n",
       "...           ...       ...       ...       ...       ...       ...       ...  \n",
       "2373008  0.002735  0.961619  0.009865  0.973804  2.317394  0.990079  0.178485  \n",
       "2373009 -0.000262  0.943420  0.010265  0.965883  1.660011  0.987520  0.240984  \n",
       "2373010 -0.001742  0.960052  0.009196  0.974733  2.107327  0.990309  0.051357  \n",
       "2373011  0.006766  0.973274  0.008938  0.983277  1.997238  0.993593  0.098071  \n",
       "2373012  0.001491  0.966683  0.009228  0.975586  2.369854  0.977818  0.076832  \n",
       "\n",
       "[2373013 rows x 12 columns]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gamjet_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a9d9f9d6",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "4adbf8d4",
   "metadata": {},
   "outputs": [],
   "source": [
    "#now for jetjet:\n",
    "jetjetfile = uproot.open(folder+'/mc21_jetjet_v02/Py8_jetjet_mc21_801279_p5057_Rel22_AB22.2.50_v02.root', entrystop=1000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "2997f4eb",
   "metadata": {},
   "outputs": [],
   "source": [
    "jetjet_SP = jetjetfile['SinglePhoton']\n",
    "jetjet_df = jetjet_SP.arrays(gamjetbranches, library='pd')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "dfa6471d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>evtWeight</th>\n",
       "      <th>y_passOQ</th>\n",
       "      <th>y_pt</th>\n",
       "      <th>y_eta</th>\n",
       "      <th>y_isTruthMatchedPhoton</th>\n",
       "      <th>y_Rhad</th>\n",
       "      <th>y_Reta</th>\n",
       "      <th>y_weta2</th>\n",
       "      <th>y_Rphi</th>\n",
       "      <th>y_wtots1</th>\n",
       "      <th>y_Eratio</th>\n",
       "      <th>y_f1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>True</td>\n",
       "      <td>24.023392</td>\n",
       "      <td>1.089871</td>\n",
       "      <td>True</td>\n",
       "      <td>0.040991</td>\n",
       "      <td>0.988864</td>\n",
       "      <td>0.010117</td>\n",
       "      <td>0.978020</td>\n",
       "      <td>2.126362</td>\n",
       "      <td>0.967211</td>\n",
       "      <td>0.221742</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "      <td>True</td>\n",
       "      <td>39.399208</td>\n",
       "      <td>0.972699</td>\n",
       "      <td>False</td>\n",
       "      <td>0.001513</td>\n",
       "      <td>0.962467</td>\n",
       "      <td>0.009591</td>\n",
       "      <td>0.959565</td>\n",
       "      <td>2.494230</td>\n",
       "      <td>0.865542</td>\n",
       "      <td>0.244460</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.0</td>\n",
       "      <td>True</td>\n",
       "      <td>19.430300</td>\n",
       "      <td>1.831029</td>\n",
       "      <td>False</td>\n",
       "      <td>-0.001615</td>\n",
       "      <td>0.770610</td>\n",
       "      <td>0.016360</td>\n",
       "      <td>0.942202</td>\n",
       "      <td>4.090830</td>\n",
       "      <td>0.052267</td>\n",
       "      <td>0.354223</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.0</td>\n",
       "      <td>True</td>\n",
       "      <td>51.272476</td>\n",
       "      <td>-1.860791</td>\n",
       "      <td>False</td>\n",
       "      <td>-0.008309</td>\n",
       "      <td>0.935846</td>\n",
       "      <td>0.011111</td>\n",
       "      <td>0.914650</td>\n",
       "      <td>1.777548</td>\n",
       "      <td>0.973203</td>\n",
       "      <td>0.227194</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.0</td>\n",
       "      <td>True</td>\n",
       "      <td>29.251623</td>\n",
       "      <td>-1.178138</td>\n",
       "      <td>False</td>\n",
       "      <td>0.009378</td>\n",
       "      <td>0.931706</td>\n",
       "      <td>0.010634</td>\n",
       "      <td>0.946471</td>\n",
       "      <td>3.489056</td>\n",
       "      <td>0.048322</td>\n",
       "      <td>0.286198</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>532789</th>\n",
       "      <td>1.0</td>\n",
       "      <td>True</td>\n",
       "      <td>35.467777</td>\n",
       "      <td>0.535228</td>\n",
       "      <td>False</td>\n",
       "      <td>0.010356</td>\n",
       "      <td>0.963726</td>\n",
       "      <td>0.009265</td>\n",
       "      <td>0.853047</td>\n",
       "      <td>3.015149</td>\n",
       "      <td>0.012008</td>\n",
       "      <td>0.303379</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>532790</th>\n",
       "      <td>1.0</td>\n",
       "      <td>True</td>\n",
       "      <td>26.813547</td>\n",
       "      <td>-2.078789</td>\n",
       "      <td>True</td>\n",
       "      <td>-0.006719</td>\n",
       "      <td>0.933606</td>\n",
       "      <td>0.011496</td>\n",
       "      <td>0.948996</td>\n",
       "      <td>1.256975</td>\n",
       "      <td>0.963583</td>\n",
       "      <td>0.250500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>532791</th>\n",
       "      <td>1.0</td>\n",
       "      <td>True</td>\n",
       "      <td>25.979445</td>\n",
       "      <td>-0.427861</td>\n",
       "      <td>True</td>\n",
       "      <td>-0.028259</td>\n",
       "      <td>0.916155</td>\n",
       "      <td>0.010416</td>\n",
       "      <td>0.973931</td>\n",
       "      <td>2.561163</td>\n",
       "      <td>0.875877</td>\n",
       "      <td>0.260899</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>532792</th>\n",
       "      <td>1.0</td>\n",
       "      <td>True</td>\n",
       "      <td>35.109184</td>\n",
       "      <td>1.003924</td>\n",
       "      <td>False</td>\n",
       "      <td>-0.017902</td>\n",
       "      <td>0.949494</td>\n",
       "      <td>0.009419</td>\n",
       "      <td>0.967284</td>\n",
       "      <td>2.458275</td>\n",
       "      <td>0.967088</td>\n",
       "      <td>0.305182</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>532793</th>\n",
       "      <td>1.0</td>\n",
       "      <td>True</td>\n",
       "      <td>42.062004</td>\n",
       "      <td>0.670160</td>\n",
       "      <td>False</td>\n",
       "      <td>0.009010</td>\n",
       "      <td>0.930270</td>\n",
       "      <td>0.009978</td>\n",
       "      <td>0.940645</td>\n",
       "      <td>2.005542</td>\n",
       "      <td>0.944017</td>\n",
       "      <td>0.207176</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>532794 rows Ã— 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        evtWeight  y_passOQ       y_pt     y_eta  y_isTruthMatchedPhoton  \\\n",
       "0             1.0      True  24.023392  1.089871                    True   \n",
       "1             1.0      True  39.399208  0.972699                   False   \n",
       "2             1.0      True  19.430300  1.831029                   False   \n",
       "3             1.0      True  51.272476 -1.860791                   False   \n",
       "4             1.0      True  29.251623 -1.178138                   False   \n",
       "...           ...       ...        ...       ...                     ...   \n",
       "532789        1.0      True  35.467777  0.535228                   False   \n",
       "532790        1.0      True  26.813547 -2.078789                    True   \n",
       "532791        1.0      True  25.979445 -0.427861                    True   \n",
       "532792        1.0      True  35.109184  1.003924                   False   \n",
       "532793        1.0      True  42.062004  0.670160                   False   \n",
       "\n",
       "          y_Rhad    y_Reta   y_weta2    y_Rphi  y_wtots1  y_Eratio      y_f1  \n",
       "0       0.040991  0.988864  0.010117  0.978020  2.126362  0.967211  0.221742  \n",
       "1       0.001513  0.962467  0.009591  0.959565  2.494230  0.865542  0.244460  \n",
       "2      -0.001615  0.770610  0.016360  0.942202  4.090830  0.052267  0.354223  \n",
       "3      -0.008309  0.935846  0.011111  0.914650  1.777548  0.973203  0.227194  \n",
       "4       0.009378  0.931706  0.010634  0.946471  3.489056  0.048322  0.286198  \n",
       "...          ...       ...       ...       ...       ...       ...       ...  \n",
       "532789  0.010356  0.963726  0.009265  0.853047  3.015149  0.012008  0.303379  \n",
       "532790 -0.006719  0.933606  0.011496  0.948996  1.256975  0.963583  0.250500  \n",
       "532791 -0.028259  0.916155  0.010416  0.973931  2.561163  0.875877  0.260899  \n",
       "532792 -0.017902  0.949494  0.009419  0.967284  2.458275  0.967088  0.305182  \n",
       "532793  0.009010  0.930270  0.009978  0.940645  2.005542  0.944017  0.207176  \n",
       "\n",
       "[532794 rows x 12 columns]"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "jetjet_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "451f74c4",
   "metadata": {},
   "outputs": [],
   "source": [
    "#"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "fe80feee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Histogram(Regular(200, -0.5, 5), storage=Weight()) # Sum: WeightedSum(value=532724, variance=532724) (WeightedSum(value=532794, variance=532794) with flow)"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#first, lets try y_Rhad from jetjet to compare to gamjet\n",
    "hist_2 = bh.Histogram(bh.axis.Regular(200,-.5,5),storage=bh.storage.Weight()) \n",
    "hist_2.fill(jetjet_df.y_Rhad, weight=jetjet_df.evtWeight)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "86227b91",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 648x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.close('all')\n",
    "plt.figure(figsize=(9,6))\n",
    "# draw errobars, use the sqrt error. You can use what you want there\n",
    "# poissonian 1 sigma intervals would make more sense\n",
    "plt.errorbar(hist_2.axes[0].centers, hist_2.view().value, yerr=np.sqrt(hist_2.view().variance),\n",
    "         fmt='r.',mec='black',mfc='black',ecolor='black',ms=12,label=r'single $\\gamma$')\n",
    "\n",
    "ax = plt.gca()\n",
    "ax.set_xlabel(r\"$R_{had}$\",position=(1,1),horizontalalignment='right')\n",
    "ax.set_ylabel(\"Number of events\",position=(0,1),horizontalalignment='right')\n",
    "ax.legend()\n",
    "plt.yscale('log')\n",
    "\n",
    "top = 2*max(hist_2.view().value)\n",
    "bottom = 1;\n",
    "left = -.5; right = 5\n",
    "ax.set_ylim(bottom=bottom); ax.set_ylim(top=top); ax.set_xlim(left=left); ax.set_xlim(right=right)\n",
    "\n",
    "# ax.text((right-left)*0.02+left, (top-bottom)*0.9+bottom, 'ATLAS',style = 'italic',fontweight='bold',fontsize=20,horizontalalignment='left')\n",
    "# ax.text((right-left)*0.165+left, (top-bottom)*0.9+bottom, 'Simulation Internal',fontsize=20,horizontalalignment='left')\n",
    "# ax.text((right-left)*0.02+left, (top-bottom)*0.8+bottom, r'$\\sqrt{s} =$'+'13.6 TeV, xx fb'+r'$^{-1}$',fontsize=20,horizontalalignment='left')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "492206c1",
   "metadata": {},
   "source": [
    "kind of similar shape to gamma-jet (`hist_1`), but with wider peak? Is that what i'm supposed to be looking at?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "575d19e6",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
